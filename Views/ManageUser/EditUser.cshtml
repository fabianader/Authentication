@using IdentityProject.Models.ManageUserVM
@model IdentityProject.Models.ManageUserVM.EditUserVM
@{
	ViewData["Title"] = "Edit User";
	var Roles = ViewBag.Roles as List<RolesVM>;
	var UserRoles = ViewBag.UserRoles as List<string>;
}

<h1>Edit User</h1>

<form asp-controller="ManageUser" asp-action="EditUser" asp-antiforgery="true" method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="form-group">
        <label class="control-label" asp-for="UserName"></label>
        <input class="form-control" type="text" asp-for="UserName" />
        <span asp-validation-for="UserName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label class="control-label" asp-for="PhoneNumber"></label>
        <input class="form-control" asp-for="PhoneNumber" />
        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label class="control-label" asp-for="Email"></label>
        <input class="form-control" type="email" asp-for="Email" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>
    <div class="form-group">
        @if(Roles == null) { <span class="text-danger"></span> }  @* :))))))) *@
        else
        {
            @foreach (var role in Roles)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @((UserRoles.Contains(role.RoleName)) ? "checked" : "") 
                        name="SelectedRoles" value="@role.RoleName"/>
                    <label class="form-check-label">@role.RoleName</label>
                    <span asp-validation-for="@role.RoleName" class="text-danger"></span>
                </div>
            }
        }
    </div>
    
    <input type="hidden" asp-for="UserId"/>

    <button class="btn btn-primary" type="submit">Edit</button>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}